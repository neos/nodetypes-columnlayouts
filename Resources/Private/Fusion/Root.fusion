# Basic implementation of a flexible MultiColumn element, not exposed directly but inherited by all specific MultiColumn content elements
prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn) < prototype(Neos.Neos:Content) {
    templatePath = 'resource://Neos.NodeTypes.ColumnLayouts/Private/Templates/NodeTypes/MultiColumn.html'
    layout = ${q(node).property('layout')}
    attributes.class = ${'container columns-' + q(node).property('layout')}
    columns = Neos.Fusion:Loop {
        @context.columnLayout = ${q(node).property('layout')}
        items = ${q(node).children('[instanceof Neos.Neos:ContentCollection]')}
        itemRenderer = Neos.NodeTypes.ColumnLayouts:MultiColumnItem
        itemName = 'node'
        iterationName = 'columnIteration'
    }
}

# Abstract render definition for a single content column in a multi column element
prototype(Neos.NodeTypes.ColumnLayouts:MultiColumnItem) < prototype(Neos.Neos:ContentCollection) {
    nodePath = '.'
    attributes = Neos.Fusion:DataStructure {
        class = 'column'
    }
}

# Two Column Fusion Object
prototype(Neos.NodeTypes.ColumnLayouts:TwoColumn) >
prototype(Neos.NodeTypes.ColumnLayouts:TwoColumn) < prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn)

prototype(Neos.NodeTypes.ColumnLayouts:TwoColumn.RawContentMode) < prototype(Neos.Neos:ContentComponent) {
  renderer = afx`
    <div style="display:grid; grid-template-columns: 1fr 1fr; grid-gap: 16px;">
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column0').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column1').get(0)} /></div>
    </div>
  `
}

# Three Column Fusion Object
prototype(Neos.NodeTypes.ColumnLayouts:ThreeColumn) >
prototype(Neos.NodeTypes.ColumnLayouts:ThreeColumn) < prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn)

prototype(Neos.NodeTypes.ColumnLayouts:ThreeColumn.RawContentMode) < prototype(Neos.Neos:ContentComponent) {
  renderer = afx`
    <div style="display:grid; grid-template-columns: 1fr 1fr 1fr; grid-gap: 16px;">
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column0').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column1').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column2').get(0)} /></div>
    </div>
  `
}

# Four Column Fusion Object
prototype(Neos.NodeTypes.ColumnLayouts:FourColumn) >
prototype(Neos.NodeTypes.ColumnLayouts:FourColumn) < prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn)

prototype(Neos.NodeTypes.ColumnLayouts:FourColumn.RawContentMode) < prototype(Neos.Neos:ContentComponent) {
  renderer = afx`
    <div style="display:grid; grid-template-columns: 1fr 1fr 1fr 1fr; grid-gap: 16px;">
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column0').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column1').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column2').get(0)} /></div>
      <div><Neos.Neos:RawContent.Node @context.node={q(node).children('column3').get(0)} /></div>
    </div>
  `
}
